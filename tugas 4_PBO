{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMiI+LTYnPbjD8xnNALAH+u",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/widiasingarimbun12/tugas3_praktikum-PBO_123140035_widia-salsalina-br-singarimbun/blob/main/tugas%204_PBO\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k9W2YBHnNqTZ",
        "outputId": "3c285864-eb0e-4dc9-b21a-df68ff6fd0a1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "masukkan angka0\n",
            "Error:Error, angka kuadrat dari nol tidak diperbolehkan \n",
            "masukkan angka-4\n",
            "input tidak valid, harap masukkan angka positif\n",
            "masukkan angka9\n",
            "akar kuadrat dari 9.0 adalah 3.0\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "def hitung_akar_kuadrat ():\n",
        "    while True:\n",
        "      try:\n",
        "         angka = float (input(\"masukkan angka:\"))\n",
        "         if angka < 0 :\n",
        "            raise ValueError(\"input tidak valid, harap masukkan angka positif\")\n",
        "         elif angka == 0:\n",
        "            raise ZeroDivisionError(\"Error, angka kuadrat dari nol tidak diperbolehkan \")\n",
        "\n",
        "         hasil = angka ** 0.5\n",
        "         print(f\"akar kuadrat dari {angka} adalah {hasil}\")\n",
        "         break\n",
        "\n",
        "      except ValueError as ve:\n",
        "         print(ve)\n",
        "      except ZeroDivisionError as zde:\n",
        "         print(f\"Error:{zde}\")\n",
        "\n",
        "hitung_akar_kuadrat()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class TugasNotFoundError(Exception):\n",
        "  pass\n",
        "\n",
        "def tampilkan_tugas(tugas):\n",
        "  if not tugas:\n",
        "    print(\"daftar tugas kosong\")\n",
        "  else:\n",
        "    print(\"daftar tugas:\")\n",
        "    for idx,tugas_item in enumerate(tugas,1):\n",
        "      print(f\"-{tugas_item}\")\n",
        "\n",
        "def tambah_tugas(tugas):\n",
        "  try:\n",
        "    tugas_baru = input(\"masukkan tugas baru: \")\n",
        "    if not tugas_baru.strip():\n",
        "      raise ValueError(\"tugas tidak boleh kosong\")\n",
        "    tugas.append(tugas_baru)\n",
        "    print(\"tugas berhasil ditambahkan\")\n",
        "  except ValueError as ve:\n",
        "    print (ve)\n",
        "\n",
        "def hapus_tugas(tugas):\n",
        "  try:\n",
        "    if not tugas:\n",
        "      raise TugasNotFoundError(\"tidak ada tugas yang dapat dihapus.\")\n",
        "    nomor_tugas = int(input(\"masukkan nomor tugas yang akan dihapus: \"))\n",
        "    if nomor_tugas < 1 or nomor_tugas > len(tugas):\n",
        "      raise TugasNotFoundError(f\"tugas dengan nomor {nomor_tugas}tidak ditemukan.\")\n",
        "    del tugas[nomor_tugas - 1]\n",
        "    print(f\"tugas nomor {nomor_tugas} berhasil dihapus.\")\n",
        "  except ValueError:\n",
        "      print(\"Input tidak valid. Harap masukkan nomor tugas yang valid.\")\n",
        "  except TugasNotFoundError as tnfe:\n",
        "        print(f\"Error: {tnfe}\")\n",
        "\n",
        "def main():\n",
        "  tugas = []\n",
        "  while True:\n",
        "    print(\"\\nPilih aksi:\")\n",
        "    print(\"1. Tambah tugas\")\n",
        "    print(\"2. Hapus tugas\")\n",
        "    print(\"3. Tampilkan daftar tugas\")\n",
        "    print(\"4. Keluar\")\n",
        "    try:\n",
        "       pilihan = int(input(\"Masukkan pilihan (1/2/3/4): \"))\n",
        "       if pilihan == 1:\n",
        "          tambah_tugas(tugas)\n",
        "       elif pilihan == 2:\n",
        "          hapus_tugas(tugas)\n",
        "       elif pilihan == 3:\n",
        "          tampilkan_tugas(tugas)\n",
        "       elif pilihan == 4:\n",
        "          print(\"Keluar dari program.\")\n",
        "          break\n",
        "       else:\n",
        "          raise ValueError(\"Pilihan tidak valid. Harap masukkan angka antara 1 dan 4.\")\n",
        "    except ValueError as ve:\n",
        "      print(ve)\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BB5KpWdLOAq7",
        "outputId": "5a510921-a132-4795-ffa5-3f6c241d8d1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Pilih aksi:\n",
            "1. Tambah tugas\n",
            "2. Hapus tugas\n",
            "3. Tampilkan daftar tugas\n",
            "4. Keluar\n",
            "Masukkan pilihan (1/2/3/4): 1\n",
            "masukkan tugas baru: belajar python\n",
            "tugas berhasil ditambahkan\n",
            "\n",
            "Pilih aksi:\n",
            "1. Tambah tugas\n",
            "2. Hapus tugas\n",
            "3. Tampilkan daftar tugas\n",
            "4. Keluar\n",
            "Masukkan pilihan (1/2/3/4): 1\n",
            "masukkan tugas baru: menghitung akar kuadrat\n",
            "tugas berhasil ditambahkan\n",
            "\n",
            "Pilih aksi:\n",
            "1. Tambah tugas\n",
            "2. Hapus tugas\n",
            "3. Tampilkan daftar tugas\n",
            "4. Keluar\n",
            "Masukkan pilihan (1/2/3/4): 1\n",
            "masukkan tugas baru: manajemen daftar tugas\n",
            "tugas berhasil ditambahkan\n",
            "\n",
            "Pilih aksi:\n",
            "1. Tambah tugas\n",
            "2. Hapus tugas\n",
            "3. Tampilkan daftar tugas\n",
            "4. Keluar\n",
            "Masukkan pilihan (1/2/3/4): 1\n",
            "masukkan tugas baru: sistem manajemen hewan\n",
            "tugas berhasil ditambahkan\n",
            "\n",
            "Pilih aksi:\n",
            "1. Tambah tugas\n",
            "2. Hapus tugas\n",
            "3. Tampilkan daftar tugas\n",
            "4. Keluar\n",
            "Masukkan pilihan (1/2/3/4): 2\n",
            "masukkan nomor tugas yang akan dihapus: 1\n",
            "tugas nomor 1 berhasil dihapus.\n",
            "\n",
            "Pilih aksi:\n",
            "1. Tambah tugas\n",
            "2. Hapus tugas\n",
            "3. Tampilkan daftar tugas\n",
            "4. Keluar\n",
            "Masukkan pilihan (1/2/3/4): 3\n",
            "daftar tugas:\n",
            "-menghitung akar kuadrat\n",
            "-manajemen daftar tugas\n",
            "-sistem manajemen hewan\n",
            "\n",
            "Pilih aksi:\n",
            "1. Tambah tugas\n",
            "2. Hapus tugas\n",
            "3. Tampilkan daftar tugas\n",
            "4. Keluar\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from abc import ABC, abstractmethod\n",
        "\n",
        "# Kelas abstrak Animal\n",
        "class Animal(ABC):\n",
        "    def __init__(self, name, age):\n",
        "        #Encapsulation: Name is private dan Age is private\n",
        "        self._name = name\n",
        "        self._age = age\n",
        "\n",
        "    # Getter and Setter untuk nama\n",
        "    def get_name(self):\n",
        "        return self._name\n",
        "\n",
        "    def set_name(self, name):\n",
        "        if name.strip() == \"\":\n",
        "            raise ValueError(\"Nama tidak boleh kosong\")\n",
        "        self._name = name\n",
        "\n",
        "    # Getter and Setter untuk usia\n",
        "    def get_age(self):\n",
        "        return self._age\n",
        "\n",
        "    def set_age(self, age):\n",
        "        if age <= 0:\n",
        "            raise ValueError(\"Usia harus lebih dari 0\")\n",
        "        self._age = age\n",
        "\n",
        "    @abstractmethod\n",
        "    def make_sound(self):\n",
        "        pass  # Setiap kelas turunan harus mengimplementasikan metode ini\n",
        "\n",
        "\n",
        "# Kelas dog  yang mewarisi Animal\n",
        "class Dog(Animal):\n",
        "    def __init__(self, name, age, breed):\n",
        "        super().__init__(name, age)\n",
        "        self.breed = breed  # breed merupakan atribut spesifik untuk anjing\n",
        "\n",
        "    def make_sound(self):\n",
        "        return \"Gung gung gung!\"  # Polimorfisme: suara anjing\n",
        "\n",
        "    def get_breed(self):\n",
        "        return self.breed\n",
        "\n",
        "\n",
        "# Kelas Cat yang mewarisi Animal\n",
        "class Cat(Animal):\n",
        "    def __init__(self, name, age, color):\n",
        "        super().__init__(name, age)\n",
        "        self.color = color  # color merupakan atribut spesifik untuk kucing\n",
        "\n",
        "    def make_sound(self):\n",
        "        return \"Meong meong meong!\"  # Polimorfisme: suara kucing\n",
        "\n",
        "    def get_color(self):\n",
        "        return self.color\n",
        "\n",
        "\n",
        "# Kelas Monkey yang mewarisi Animal\n",
        "class Monkey(Animal):\n",
        "    def __init__(self, name, age):\n",
        "        super().__init__(name, age)\n",
        "\n",
        "    def make_sound(self):\n",
        "        return \"uuuk aaak uuuuk aaakkk!\"  # Polimorfisme: suara monyet\n",
        "\n",
        "\n",
        "# Kelas Snake yang mewarisi Animal\n",
        "class Snake(Animal):\n",
        "    def __init__(self, name, age):\n",
        "        super().__init__(name, age)\n",
        "\n",
        "    def make_sound(self):\n",
        "        return \"Sssst sssst ssst!\"  # Polimorfisme: suara ular\n",
        "\n",
        "\n",
        "# Kelas Lion yang mewarisi Animal\n",
        "class Lion(Animal):\n",
        "    def __init__(self, name, age):\n",
        "        super().__init__(name, age)\n",
        "\n",
        "    def make_sound(self):\n",
        "        return \"Roar roar roar!\"  # Polimorfisme: suara singa\n",
        "\n",
        "\n",
        "# Kelas Bird yang mewarisi Animal\n",
        "class Bird(Animal):\n",
        "    def __init__(self, name, age, species):\n",
        "        super().__init__(name, age)\n",
        "        self.species = species  # species merupakan atribut spesifik untuk burung\n",
        "\n",
        "    def make_sound(self):\n",
        "        return \"Tweet tweet !\"  # Polimorfisme: suara burung\n",
        "\n",
        "    def get_species(self):\n",
        "        return self.species\n",
        "\n",
        "\n",
        "# Kelas untuk Manajemen Kebun Binatang\n",
        "class ZooManagement:\n",
        "    def __init__(self):\n",
        "        self.animals = []\n",
        "\n",
        "    def add_animal(self, animal):\n",
        "        try:\n",
        "            if not isinstance(animal, Animal):\n",
        "                raise TypeError(\"Hanya objek Animal yang bisa ditambahkan\")\n",
        "            self.animals.append(animal)\n",
        "            print(f\"{animal.get_name()} berhasil ditambahkan ke kebun binatang.\")\n",
        "        except TypeError as e:\n",
        "            print(e)\n",
        "\n",
        "    def display_all_animals(self):\n",
        "        if not self.animals:\n",
        "            print(\"Tidak ada hewan di kebun binatang.\")\n",
        "            return\n",
        "        print(\"Daftar Hewan di Kebun Binatang:\")\n",
        "        for animal in self.animals:\n",
        "            print(f\"Nama: {animal.get_name()}, Usia: {animal.get_age()} tahun, Suara: {animal.make_sound()}\")\n",
        "\n",
        "    def remove_animal(self, name):\n",
        "        try:\n",
        "            animal_to_remove = next((animal for animal in self.animals if animal.get_name() == name), None)\n",
        "            if animal_to_remove is None:\n",
        "                raise ValueError(f\"Hewan dengan nama {name} tidak ditemukan.\")\n",
        "            self.animals.remove(animal_to_remove)\n",
        "            print(f\"{name} berhasil dihapus dari kebun binatang.\")\n",
        "        except ValueError as e:\n",
        "            print(e)\n",
        "\n",
        "\n",
        "# Fungsi utama\n",
        "def main():\n",
        "    zoo = ZooManagement()\n",
        "\n",
        "    # Menambahkan hewan\n",
        "    dog = Dog(\"dogyy\", 5, \"Golden Retriever\")\n",
        "    cat = Cat(\"Whiskers\", 3, \"Orange\")\n",
        "    monkey = Monkey(\"didaww\", 4)\n",
        "    snake = Snake(\"Slither\", 2)\n",
        "    lion = Lion(\"Simba\", 6)\n",
        "    bird = Bird(\"my swaery\", 1, \"Canary\")\n",
        "    zoo.add_animal(dog)\n",
        "    zoo.add_animal(cat)\n",
        "    zoo.add_animal(monkey)\n",
        "    zoo.add_animal(snake)\n",
        "    zoo.add_animal(lion)\n",
        "    zoo.add_animal(bird)\n",
        "\n",
        "    # Menampilkan semua hewan\n",
        "    zoo.display_all_animals()\n",
        "\n",
        "    # Menghapus hewan\n",
        "    zoo.remove_animal(\"slither\")\n",
        "    zoo.display_all_animals()\n",
        "\n",
        "    # Coba menghapus hewan yang tidak ada\n",
        "    zoo.remove_animal(\"Fido\")\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "xwY6zynKQqGF"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}