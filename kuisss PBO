{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN4YrwJxsxxqtrGFlr98S00",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/widiasingarimbun12/tugas3_praktikum-PBO_123140035_widia-salsalina-br-singarimbun/blob/main/kuisss%20PBO\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FmQKygKM0X3A",
        "outputId": "ee967bba-c8ea-4d6c-9f77-3c2a48db179f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "1. Apa tujuan dari Game class dalam program ini, meskipun tidak digunakan secara langsung?\n",
            "1. Untuk menyimpan kode rahasia\n",
            "2. Sebagai base class untuk struktur OOP (inheritance)\n",
            "3. Untuk menampilkan tampilan keypad\n",
            "4. Menyimpan skor pemain\n",
            "Jawaban Anda: 2\n",
            "\n",
            "2. Fungsi dari method generate_code() pada class HardMode adalah‚Ä¶\n",
            "1. Menghasilkan angka acak dari 0‚Äì9\n",
            "2. Menghasilkan angka acak tanpa duplikasi\n",
            "3. Mengatur level kesulitan ke hard\n",
            "4. Menentukan panjang kode\n",
            "Jawaban Anda: 2\n",
            "\n",
            "3. Di method get_feedback(), apa arti simbol ~ dalam hasil tebakan?\n",
            "1. Angka salah total\n",
            "2. Angka dan posisi benar\n",
            "3. Angka benar, posisi salah\n",
            "4. Feedback khusus untuk mode easy\n",
            "Jawaban Anda: 3\n",
            "\n",
            "4. Konsep OOP apa yang diterapkan ketika method get_feedback() ditulis ulang di class HardMode?\n",
            "1. Encapsulation\n",
            "2. Inheritance\n",
            "3. Polymorphism\n",
            "4. Abstraction\n",
            "Jawaban Anda: 3\n",
            "\n",
            "5. Apa yang akan terjadi jika user memasukkan input yang panjangnya tidak sama dengan self.length?\n",
            "1. Program error\n",
            "2. Diterima, tapi salah\n",
            "3. Dianggap tebakan terakhir\n",
            "4. Diberi peringatan dan diminta ulang\n",
            "Jawaban Anda: 4\n"
          ]
        }
      ],
      "source": [
        "#SOAL 1 : Pemahaman terhadap game Code Cracker\n",
        "#PART A, pilihan ganda/jawaban singkat\n",
        "soal_list = [\n",
        "      {\"soal\": \"1. Apa tujuan dari Game class dalam program ini, meskipun tidak digunakan secara langsung?\",\n",
        "     \"pilihan\": [\"Untuk menyimpan kode rahasia\", \"Sebagai base class untuk struktur OOP (inheritance)\", \"Untuk menampilkan tampilan keypad\", \"Menyimpan skor pemain\"],\n",
        "     \"jawaban_benar\": \"Sebagai base class untuk struktur OOP (inheritance)\"},\n",
        "\n",
        "    {\"soal\": \"2. Fungsi dari method generate_code() pada class HardMode adalah‚Ä¶\",\n",
        "     \"pilihan\": [\"Menghasilkan angka acak dari 0‚Äì9\", \"Menghasilkan angka acak tanpa duplikasi\", \"Mengatur level kesulitan ke hard\", \"Menentukan panjang kode\"],\n",
        "     \"jawaban_benar\": \"Menghasilkan angka acak tanpa duplikasi\"},\n",
        "\n",
        "    {\"soal\": \"3. Di method get_feedback(), apa arti simbol ~ dalam hasil tebakan?\",\n",
        "     \"pilihan\": [\"Angka salah total\", \"Angka dan posisi benar\", \"Angka benar, posisi salah\", \"Feedback khusus untuk mode easy\"],\n",
        "     \"jawaban_benar\": \"Angka benar, posisi salah\"},\n",
        "\n",
        "    {\"soal\": \"4. Konsep OOP apa yang diterapkan ketika method get_feedback() ditulis ulang di class HardMode?\",\n",
        "     \"pilihan\": [\"Encapsulation\", \"Inheritance\", \"Polymorphism\", \"Abstraction\"],\n",
        "     \"jawaban_benar\": \"Polymorphism\"},\n",
        "\n",
        "    {\"soal\": \"5. Apa yang akan terjadi jika user memasukkan input yang panjangnya tidak sama dengan self.length?\",\n",
        "     \"pilihan\": [\"Program error\", \"Diterima, tapi salah\", \"Dianggap tebakan terakhir\", \"Diberi peringatan dan diminta ulang\"],\n",
        "     \"jawaban_benar\": \"Diberi peringatan dan diminta ulang\"}\n",
        "]\n",
        "\n",
        "# Fungsi untuk menampilkan soal, pilihan, dan memeriksa jawaban\n",
        "def tampilkan_soal(soal, pilihan, jawaban_benar, jawaban_pengguna):\n",
        "    print(f\"\\n{soal}\")\n",
        "    for idx, pilihan_item in enumerate(pilihan, start=1):\n",
        "        print(f\"{idx}. {pilihan_item}\")\n",
        "\n",
        "    # Jawaban otomatis dari pengguna\n",
        "    print(f\"Jawaban Anda: {jawaban_pengguna}\")\n",
        "\n",
        "# Menampilkan soal-soal dan langsung memeriksa jawaban otomatis\n",
        "for idx, soal_item in enumerate(soal_list):\n",
        "    tampilkan_soal(soal_item[\"soal\"], soal_item[\"pilihan\"], soal_item[\"jawaban_benar\"], jawaban_pengguna[idx])\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#PART B ‚Äì Praktik Coding / Modifikasi\n",
        "import random\n",
        "import time\n",
        "\n",
        "# Base Class: Game\n",
        "class Game:\n",
        "    def start(self):\n",
        "        raise NotImplementedError(\"Subclass must implement start method\")\n",
        "\n",
        "# Parent Class: CodeCracker\n",
        "class CodeCracker(Game):\n",
        "    def __init__(self, name, length=3, max_attempts=6):\n",
        "        self.name = name\n",
        "        self.length = length\n",
        "        self.max_attempts = max_attempts\n",
        "        self.code = self.generate_code()\n",
        "        self.attempts = 0\n",
        "        self.won = False\n",
        "        self.score = 0  # (6) Tambahkan skor\n",
        "        self.used_hint = False  # (8) Status apakah hint sudah digunakan\n",
        "        self.guesses_history = set()  # (9) Menyimpan semua tebakan sebelumnya\n",
        "\n",
        "    def generate_code(self):\n",
        "        return [str(random.randint(0, 9)) for _ in range(self.length)]\n",
        "\n",
        "    def get_feedback(self, guess):\n",
        "        feedback = []\n",
        "        for i in range(self.length):\n",
        "            if guess[i] == self.code[i]:\n",
        "                feedback.append(\"‚úîÔ∏è\")  # Benar posisi & angka\n",
        "                self.score += 10  # (6) ‚úîÔ∏è = +10 poin\n",
        "            elif guess[i] in self.code:\n",
        "                feedback.append(\"~\")   # Benar angka, salah posisi\n",
        "                self.score += 5   # (6) ~ = +5 poin\n",
        "            else:\n",
        "                feedback.append(\"x\")   # Salah\n",
        "        return \" \".join(feedback)\n",
        "\n",
        "    def display_keypad(self):\n",
        "        print(\"\"\"\n",
        "       ___________\n",
        "      | 7 | 8 | 9 |\n",
        "      | 4 | 5 | 6 |\n",
        "      | 1 | 2 | 3 |\n",
        "      |     0     |\n",
        "       ___________\n",
        "        \"\"\")\n",
        "\n",
        "    def use_hint(self):\n",
        "        if self.used_hint:\n",
        "            print(\"‚ùóYou have already used the hint!\")\n",
        "            return\n",
        "        hint_index = random.randint(0, self.length - 1)\n",
        "        hint_value = self.code[hint_index]\n",
        "        print(f\"üí° Hint: Digit at position {hint_index+1} is '{hint_value}'\")\n",
        "        self.used_hint = True\n",
        "\n",
        "    def start(self):\n",
        "        print(f\"\\nüïµÔ∏è‚Äç‚ôÇÔ∏è Welcome, Agent {self.name}! Crack the {self.length}-digit code!\")\n",
        "        print(f\"You have {self.max_attempts} attempts.\\n\")\n",
        "        self.display_keypad()\n",
        "\n",
        "        while self.attempts < self.max_attempts and not self.won:\n",
        "            guess = input(f\"Attempt {self.attempts+1}: Enter your {self.length}-digit guess (or type 'hint'): \")\n",
        "\n",
        "            if guess.lower() == 'hint':\n",
        "                self.use_hint()  # (8) Gunakan hint\n",
        "                continue\n",
        "\n",
        "            if len(guess) != self.length or not guess.isdigit():\n",
        "                print(\"‚ùóInvalid input. Try again.\\n\")\n",
        "                continue\n",
        "\n",
        "            if guess in self.guesses_history:\n",
        "                print(\"‚ö†Ô∏è You've already tried that code!\\n\")  # (9) Validasi tebakan sama\n",
        "                continue\n",
        "            self.guesses_history.add(guess)\n",
        "\n",
        "            self.attempts += 1\n",
        "            feedback = self.get_feedback(guess)\n",
        "            print(f\"üîç Feedback: {feedback}\\n\")\n",
        "\n",
        "            if list(guess) == self.code:\n",
        "                self.won = True\n",
        "                print(f\"üéâ Code cracked in {self.attempts} attempts. Well done, Agent {self.name}!\")\n",
        "                break\n",
        "\n",
        "        if not self.won:\n",
        "            print(f\"üí£ You failed! The correct code was: {''.join(self.code)}\")\n",
        "\n",
        "        print(f\"\\nüèÜ Final Score: {self.score} points\")  # (6) Tampilkan skor akhir\n",
        "\n",
        "# Child Class: Hard Mode\n",
        "class HardMode(CodeCracker):\n",
        "    def generate_code(self):\n",
        "        digits = list('0123456789')\n",
        "        return random.sample(digits, self.length)\n",
        "\n",
        "    def get_feedback(self, guess):\n",
        "        base_feedback = super().get_feedback(guess)\n",
        "        return \"üß† AI Response: \" + base_feedback\n",
        "\n",
        "# (7) Subclass baru: Insane Mode\n",
        "class InsaneMode(CodeCracker):\n",
        "    def __init__(self, name):\n",
        "        super().__init__(name, length=6, max_attempts=5)\n",
        "\n",
        "    def generate_code(self):\n",
        "        digits = list('0123456789')\n",
        "        return random.sample(digits, self.length)\n",
        "\n",
        "    def get_feedback(self, guess):\n",
        "        feedback = []\n",
        "        for i in range(self.length):\n",
        "            if guess[i] == self.code[i]:\n",
        "                feedback.append(\"üî•\")  # Benar posisi\n",
        "                self.score += 10\n",
        "            elif guess[i] in self.code:\n",
        "                feedback.append(\"‚ùÑÔ∏è\")  # Salah posisi\n",
        "                self.score += 5\n",
        "            else:\n",
        "                feedback.append(\"üíÄ\")  # Salah\n",
        "        return \" \".join(feedback)\n",
        "\n",
        "# (10) Subclass baru: Time Trial Mode\n",
        "class TimeTrialMode(CodeCracker):\n",
        "    def __init__(self, name):\n",
        "        super().__init__(name, length=4, max_attempts=9999)  # unlimited attempts, batas waktu saja\n",
        "\n",
        "    def start(self):\n",
        "        print(f\"\\n‚è±Ô∏è Welcome to Time Trial Mode, Agent {self.name}!\")\n",
        "        print(\"You have 20 seconds to crack the 4-digit code.\\n\")\n",
        "        self.display_keypad()\n",
        "\n",
        "        start_time = time.time()\n",
        "\n",
        "        while not self.won:\n",
        "            elapsed_time = time.time() - start_time\n",
        "            if elapsed_time > 20:\n",
        "                print(\"‚è±Ô∏è Time's up! You failed!\")\n",
        "                print(f\"The correct code was: {''.join(self.code)}\")\n",
        "                break\n",
        "\n",
        "            guess = input(f\"Attempt {self.attempts+1}: Enter your 4-digit guess: \")\n",
        "\n",
        "            if len(guess) != self.length or not guess.isdigit():\n",
        "                print(\"‚ùóInvalid input. Try again.\\n\")\n",
        "                continue\n",
        "\n",
        "            if guess in self.guesses_history:\n",
        "                print(\"‚ö†Ô∏è You've already tried that code!\\n\")\n",
        "                continue\n",
        "            self.guesses_history.add(guess)\n",
        "\n",
        "            self.attempts += 1\n",
        "            feedback = self.get_feedback(guess)\n",
        "            print(f\"üîç Feedback: {feedback}\\n\")\n",
        "\n",
        "            if list(guess) == self.code:\n",
        "                self.won = True\n",
        "                print(f\"üéâ Code cracked in {self.attempts} attempts! You made it in time, Agent {self.name}!\")\n",
        "                print(f\"\\nüèÜ Final Score: {self.score} points\")\n",
        "                break\n",
        "\n",
        "# Game Menu\n",
        "def menu(name):\n",
        "    while True:\n",
        "        print(\"\"\"\n",
        "    === CODE CRACKER ===\n",
        "    1. Easy Mode (3-digit)\n",
        "    2. Medium Mode (4-digit)\n",
        "    3. Hard Mode (5-digit, no duplicate)\n",
        "    4. Insane Mode (6-digit, 5 attempts only)\n",
        "    5. Time Trial Mode (20 seconds challenge)\n",
        "    \"\"\")\n",
        "        choice = input(\"Select mode [1-5]: \")\n",
        "\n",
        "        if choice == '1':\n",
        "            game = CodeCracker(name, length=3, max_attempts=6)\n",
        "        elif choice == '2':\n",
        "            game = CodeCracker(name, length=4, max_attempts=7)\n",
        "        elif choice == '3':\n",
        "            game = HardMode(name, length=5, max_attempts=8)\n",
        "        elif choice == '4':\n",
        "            game = InsaneMode(name)\n",
        "        elif choice == '5':\n",
        "            game = TimeTrialMode(name)\n",
        "        else:\n",
        "            print(\"‚ùóInvalid choice.\")\n",
        "            continue\n",
        "\n",
        "        game.start()\n",
        "\n",
        "        again = input(\"\\nPlay again? (y/n): \")\n",
        "        if again.lower() != 'y':\n",
        "            print(\"üëã Thanks for playing, Agent!\")\n",
        "            break\n",
        "\n",
        "# Start the game\n",
        "name = input(\"Enter your agent codename: \")\n",
        "print(f'hello {name}, welcome to secret code cracker mission üòé')\n",
        "menu(name)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DG2Xv_Zx6zyx",
        "outputId": "bb9d5a17-5185-45ab-b698-0060137a7857"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your agent codename: widia\n",
            "hello widia, welcome to secret code cracker mission üòé\n",
            "\n",
            "    === CODE CRACKER ===\n",
            "    1. Easy Mode (3-digit)\n",
            "    2. Medium Mode (4-digit)\n",
            "    3. Hard Mode (5-digit, no duplicate)\n",
            "    4. Insane Mode (6-digit, 5 attempts only)\n",
            "    5. Time Trial Mode (20 seconds challenge)\n",
            "    \n",
            "Select mode [1-5]: 3\n",
            "\n",
            "üïµÔ∏è‚Äç‚ôÇÔ∏è Welcome, Agent widia! Crack the 5-digit code!\n",
            "You have 8 attempts.\n",
            "\n",
            "\n",
            "       ___________\n",
            "      | 7 | 8 | 9 |\n",
            "      | 4 | 5 | 6 |\n",
            "      | 1 | 2 | 3 |\n",
            "      |     0     |\n",
            "       ___________\n",
            "        \n",
            "Attempt 1: Enter your 5-digit guess (or type 'hint'): 12345\n",
            "üîç Feedback: üß† AI Response: ~ ‚úîÔ∏è ~ x x\n",
            "\n",
            "Attempt 2: Enter your 5-digit guess (or type 'hint'): 32167\n",
            "üîç Feedback: üß† AI Response: ~ ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è x\n",
            "\n",
            "Attempt 3: Enter your 5-digit guess (or type 'hint'): 82145\n",
            "üîç Feedback: üß† AI Response: x ‚úîÔ∏è ‚úîÔ∏è x x\n",
            "\n",
            "Attempt 4: Enter your 5-digit guess (or type 'hint'): 92160\n",
            "üîç Feedback: üß† AI Response: ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è x\n",
            "\n",
            "Attempt 5: Enter your 5-digit guess (or type 'hint'): 92164\n",
            "üîç Feedback: üß† AI Response: ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è x\n",
            "\n",
            "Attempt 6: Enter your 5-digit guess (or type 'hint'): 92163\n",
            "üîç Feedback: üß† AI Response: ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è\n",
            "\n",
            "üéâ Code cracked in 6 attempts. Well done, Agent widia!\n",
            "\n",
            "üèÜ Final Score: 205 points\n",
            "\n",
            "Play again? (y/n): y\n",
            "\n",
            "    === CODE CRACKER ===\n",
            "    1. Easy Mode (3-digit)\n",
            "    2. Medium Mode (4-digit)\n",
            "    3. Hard Mode (5-digit, no duplicate)\n",
            "    4. Insane Mode (6-digit, 5 attempts only)\n",
            "    5. Time Trial Mode (20 seconds challenge)\n",
            "    \n",
            "Select mode [1-5]: 5\n",
            "\n",
            "‚è±Ô∏è Welcome to Time Trial Mode, Agent widia!\n",
            "You have 20 seconds to crack the 4-digit code.\n",
            "\n",
            "\n",
            "       ___________\n",
            "      | 7 | 8 | 9 |\n",
            "      | 4 | 5 | 6 |\n",
            "      | 1 | 2 | 3 |\n",
            "      |     0     |\n",
            "       ___________\n",
            "        \n",
            "Attempt 1: Enter your 4-digit guess: 1234\n",
            "üîç Feedback: x ~ x x\n",
            "\n",
            "Attempt 2: Enter your 4-digit guess: 9876\n",
            "üîç Feedback: ‚úîÔ∏è ‚úîÔ∏è ~ x\n",
            "\n",
            "Attempt 3: Enter your 4-digit guess: 9821\n",
            "üîç Feedback: ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è x\n",
            "\n",
            "Attempt 4: Enter your 4-digit guess: 9823\n",
            "üîç Feedback: ‚úîÔ∏è ‚úîÔ∏è ‚úîÔ∏è x\n",
            "\n",
            "‚è±Ô∏è Time's up! You failed!\n",
            "The correct code was: 9827\n",
            "\n",
            "Play again? (y/n): 9824\n",
            "üëã Thanks for playing, Agent!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#SOAL 2 : Pemahaman terhadap game Typing Rush\n",
        "#QUIZ ‚Äì TYPING RUSH GAME (Python OOP)\n",
        "#part A"
      ],
      "metadata": {
        "id": "0r2RVIfb-z58"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Apa fungsi dari class BaseGame dalam program ini?\n",
        "\n",
        "jawab:\n",
        "Sebagai template dasar semua game: mengatur struktur pemain, durasi, wordbank, dan mewajibkan subclass membuat start_game() dan show_results().\n",
        "\n",
        "2. Apa yang dimaksud dengan polymorphism, dan bagaimana konsep itu diterapkan di dalam class TypingBattleGame?\n",
        "\n",
        "jawab:\n",
        "Polymorphism adalah kemampuan OOP untuk menggunakan method yang sama namun perilakunya berbeda di tiap class turunan.\n",
        "Dalam program ini, BaseGame mendefinisikan show_results() sebagai method yang harus diisi, lalu TypingBattleGame mengimplementasikan show_results() dengan caranya sendiri, yaitu menampilkan pemain berdasarkan peringkat WPM (Words Per Minute).\n",
        "\n",
        "3. Jelaskan bagaimana akurasi dan WPM dihitung dalam game ini.\n",
        "\n",
        "jawab:\n",
        "Akurasi =\n",
        "(Jumlah kata benar √∑ (kata benar + kata salah)) x 100.\n",
        "\n",
        "->Mengukur seberapa tepat pemain mengetik kata dibanding total kata yang mereka ketik.\n",
        "\n",
        "WPM (Words Per Minute) =(Jumlah kata benar √∑ waktu bermain dalam detik) x 60\n",
        "\n",
        "->Mengukur seberapa cepat pemain mengetik kata per menit.\n",
        "\n",
        "\n",
        "4. Apa yang akan terjadi jika pemain mengetik lebih lambat dari waktu yang ditentukan (duration)? Bagaimana program meresponsnya?\n",
        "jawab:\n",
        "Jika pemain mengetik melebihi batas waktu (duration), program akan:\n",
        "Menandai pemain dengan exceeded_time = True.\n",
        "Menampilkan peringatan: \"‚ö†Ô∏è You exceeded the time limit!\" bersama durasi sebenarnya.\n",
        "Meskipun pemain lanjut mengetik, nilai mereka tetap dihitung dan dimasukkan ke hasil akhir.\n",
        "\n",
        "5. Sebutkan 2 manfaat penggunaan OOP dalam pembuatan game seperti ini.\n",
        "jawab:\n",
        "-Mudah Dikembangkan:\n",
        "Misalnya mau buat mode game baru, cukup buat class baru yang turunan dari BaseGame tanpa perlu ubah struktur utama.\n",
        "\n",
        "-Organisasi Kode Lebih Baik:\n",
        "Dengan memisahkan tugas ke dalam class (Player, WordBank, Game), program lebih terstruktur, lebih mudah dipahami, diperbaiki, dan diuji.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "XCcoNSrP_82D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#PART B,Praktik kode\n",
        "\n",
        "import random\n",
        "import time\n",
        "import json\n",
        "from pathlib import Path\n",
        "\n",
        "# ---------- Kelas WordBank ----------\n",
        "class WordBank:\n",
        "    # Menyediakan daftar kata yang akan digunakan dalam permainan\n",
        "    def __init__(self):\n",
        "        self.words = ['the', 'loop', 'index', 'variable', 'function', 'class', 'object',\n",
        "                      'python', 'recursion', 'update', 'while', 'condition', 'break',\n",
        "                      'return', 'stack', 'queue', 'boolean', 'syntax', 'typing', 'keyboard']\n",
        "\n",
        "    def generate_text(self, count=20):\n",
        "        # Menghasilkan list kata secara acak sebanyak 'count'\n",
        "        return [random.choice(self.words) for _ in range(count)]\n",
        "\n",
        "# ---------- Kelas Player ----------\n",
        "class Player:\n",
        "    # Menyimpan data setiap pemain\n",
        "    def __init__(self, name):\n",
        "        self.name = name\n",
        "        self.correct = 0\n",
        "        self.incorrect = 0\n",
        "        self.duration = 0.0\n",
        "        self.exceeded_time = False\n",
        "\n",
        "    def accuracy(self):\n",
        "        # Menghitung akurasi ketikan\n",
        "        total = self.correct + self.incorrect\n",
        "        return round((self.correct / total) * 100, 2) if total > 0 else 0\n",
        "\n",
        "    def wpm(self):\n",
        "        # Menghitung Words Per Minute (WPM)\n",
        "        return round((self.correct / self.duration) * 60, 2) if self.duration > 0 else 0\n",
        "\n",
        "    def adjusted_wpm(self):\n",
        "        # WPM yang sudah ditambahkan bonus +5 jika ketik <20 detik\n",
        "        bonus = 5 if self.duration < 20 else 0\n",
        "        return self.wpm() + bonus\n",
        "\n",
        "# ---------- Base Game Class (Abstract) ----------\n",
        "class BaseGame:\n",
        "    # Kelas dasar untuk semua game, harus di-inherit\n",
        "    def __init__(self, duration):\n",
        "        self.players = []\n",
        "        self.duration = duration\n",
        "        self.wordbank = WordBank()\n",
        "\n",
        "    def add_player(self, name):\n",
        "        self.players.append(Player(name))\n",
        "\n",
        "    def start_game(self):\n",
        "        raise NotImplementedError(\"start_game must be implemented by subclass\")\n",
        "\n",
        "    def show_results(self):\n",
        "        raise NotImplementedError(\"show_results must be implemented by subclass\")\n",
        "\n",
        "# ---------- Game Class: TypingBattleGame ----------\n",
        "class TypingBattleGame(BaseGame):\n",
        "    # Game utama, hasil berdasarkan WPM\n",
        "    def __init__(self, difficulty='Medium'):\n",
        "        # Menentukan durasi berdasarkan difficulty\n",
        "        if difficulty.lower() == 'easy':\n",
        "            duration = 60\n",
        "        elif difficulty.lower() == 'hard':\n",
        "            duration = 15\n",
        "        else:\n",
        "            duration = 30  # default Medium\n",
        "        super().__init__(duration)\n",
        "        self.leaderboard_path = Path(\"leaderboard.json\")\n",
        "\n",
        "    def start_game(self):\n",
        "        print(f\"‚å®Ô∏è  Welcome to Typing Battle!\")\n",
        "        print(f\"üïí You have {self.duration} seconds to type as many correct words as you can.\\n\")\n",
        "\n",
        "        for player in self.players:\n",
        "            input(f\"‚ñ∂Ô∏è {player.name}'s turn. Press ENTER to start...\")\n",
        "            words = self.wordbank.generate_text()\n",
        "            target = ' '.join(words)\n",
        "            print(\"\\nüìù Type this:\")\n",
        "            print(target)\n",
        "            print(\"\\n‚å®Ô∏è Start typing now!\\n\")\n",
        "\n",
        "            start = time.time()\n",
        "            typed = input(\"Your input: \")\n",
        "            end = time.time()\n",
        "            elapsed = round(end - start, 2)\n",
        "\n",
        "            player.duration = elapsed\n",
        "            if elapsed > self.duration:\n",
        "                player.exceeded_time = True\n",
        "                print(f\"\\n‚ö†Ô∏è You exceeded the time limit of {self.duration}s! Your input time: {elapsed}s\")\n",
        "\n",
        "            typed_words = typed.strip().split()\n",
        "            for i in range(min(len(typed_words), len(words))):\n",
        "                if typed_words[i] == words[i]:\n",
        "                    player.correct += 1\n",
        "                else:\n",
        "                    player.incorrect += 1\n",
        "\n",
        "            player.incorrect += max(0, len(typed_words) - len(words))\n",
        "\n",
        "            print(f\"\\n‚è±Ô∏è Time: {player.duration}s | ‚úÖ Correct: {player.correct} | ‚ùå Incorrect: {player.incorrect}\")\n",
        "            print(f\"üéØ Accuracy: {player.accuracy()}% | üí® WPM: {player.wpm()} | üõ°Ô∏è Adjusted WPM: {player.adjusted_wpm()}\\n\")\n",
        "            print(\"üîÅ Next player...\\n\")\n",
        "\n",
        "        self.show_results()\n",
        "        self.save_leaderboard()\n",
        "\n",
        "    def show_results(self):\n",
        "        # Menampilkan hasil akhir berdasarkan WPM\n",
        "        print(\"üèÅ FINAL RESULTS (Based on WPM):\")\n",
        "        ranked = sorted(self.players, key=lambda p: p.wpm(), reverse=True)\n",
        "        for i, p in enumerate(ranked, 1):\n",
        "            warning = \"‚è∞ (Over time)\" if p.exceeded_time else \"\"\n",
        "            print(f\"{i}. {p.name} | WPM: {p.wpm()} | Adjusted WPM: {p.adjusted_wpm()} | Accuracy: {p.accuracy()}% {warning}\")\n",
        "\n",
        "    def save_leaderboard(self):\n",
        "        # Menyimpan leaderboard ke file JSON\n",
        "        leaderboard = []\n",
        "        if self.leaderboard_path.exists():\n",
        "            with open(self.leaderboard_path, 'r') as f:\n",
        "                leaderboard = json.load(f)\n",
        "\n",
        "        for p in self.players:\n",
        "            leaderboard.append({\n",
        "                \"name\": p.name,\n",
        "                \"wpm\": p.wpm(),\n",
        "                \"adjusted_wpm\": p.adjusted_wpm(),\n",
        "                \"accuracy\": p.accuracy()\n",
        "            })\n",
        "\n",
        "        leaderboard = sorted(leaderboard, key=lambda x: x['adjusted_wpm'], reverse=True)[:10]\n",
        "\n",
        "        with open(self.leaderboard_path, 'w') as f:\n",
        "            json.dump(leaderboard, f, indent=4)\n",
        "\n",
        "        print(\"\\nüì• Leaderboard saved! Top players:\")\n",
        "        for i, p in enumerate(leaderboard, 1):\n",
        "            print(f\"{i}. {p['name']} | Adjusted WPM: {p['adjusted_wpm']} | Accuracy: {p['accuracy']}%\")\n",
        "\n",
        "# ---------- Subclass AccuracyOnlyGame ----------\n",
        "class AccuracyOnlyGame(TypingBattleGame):\n",
        "    # Mode game yang peringkat berdasarkan akurasi\n",
        "    def show_results(self):\n",
        "        print(\"üèÅ FINAL RESULTS (Based on Accuracy):\")\n",
        "        ranked = sorted(self.players, key=lambda p: p.accuracy(), reverse=True)\n",
        "        for i, p in enumerate(ranked, 1):\n",
        "            print(f\"{i}. {p.name} | Accuracy: {p.accuracy()}%\")\n",
        "\n",
        "# ---------- Subclass PracticeMode ----------\n",
        "class PracticeMode(BaseGame):\n",
        "    # Mode latihan tanpa batasan waktu dan tanpa leaderboard\n",
        "    def start_game(self):\n",
        "        print(\"üéØ Practice Mode - Type freely without time limit!\\n\")\n",
        "        for player in self.players:\n",
        "            input(f\"‚ñ∂Ô∏è {player.name}'s practice session. Press ENTER to start...\")\n",
        "            words = self.wordbank.generate_text()\n",
        "            target = ' '.join(words)\n",
        "            print(\"\\nüìù Type this:\")\n",
        "            print(target)\n",
        "            print(\"\\n‚å®Ô∏è Start typing now!\\n\")\n",
        "\n",
        "            start = time.time()\n",
        "            typed = input(\"Your input: \")\n",
        "            end = time.time()\n",
        "            elapsed = round(end - start, 2)\n",
        "\n",
        "            player.duration = elapsed\n",
        "\n",
        "            typed_words = typed.strip().split()\n",
        "            for i in range(min(len(typed_words), len(words))):\n",
        "                if typed_words[i] == words[i]:\n",
        "                    player.correct += 1\n",
        "                else:\n",
        "                    player.incorrect += 1\n",
        "\n",
        "            player.incorrect += max(0, len(typed_words) - len(words))\n",
        "\n",
        "            print(f\"\\n‚è±Ô∏è Time: {player.duration}s | ‚úÖ Correct: {player.correct} | ‚ùå Incorrect: {player.incorrect}\")\n",
        "            print(f\"üéØ Accuracy: {player.accuracy()}% | üí® WPM: {player.wpm()}\\n\")\n",
        "            print(\"üîÅ Next player...\\n\")\n",
        "\n",
        "    def show_results(self):\n",
        "        # Tidak menyimpan leaderboard di Practice Mode\n",
        "        print(\"‚úÖ Practice session completed. No leaderboard for practice.\")\n",
        "\n",
        "# ---------- Main ----------\n",
        "def main():\n",
        "    print(\"üéÆ Welcome to Multiplayer Typing Rush!\")\n",
        "\n",
        "    # Pilihan mode\n",
        "    print(\"\\nSelect mode:\")\n",
        "    print(\"1. Typing Battle (Based on WPM)\")\n",
        "    print(\"2. Typing Battle (Based on Accuracy)\")\n",
        "    print(\"3. Practice Mode\")\n",
        "\n",
        "    mode_choice = input(\"Enter mode (1/2/3): \")\n",
        "\n",
        "    # Pilih difficulty jika main game battle\n",
        "    if mode_choice in ['1', '2']:\n",
        "        print(\"\\nSelect difficulty:\")\n",
        "        print(\"Easy - 60 seconds\")\n",
        "        print(\"Medium - 30 seconds\")\n",
        "        print(\"Hard - 15 seconds\")\n",
        "        difficulty = input(\"Enter difficulty (Easy/Medium/Hard): \").capitalize()\n",
        "\n",
        "        if mode_choice == '1':\n",
        "            game = TypingBattleGame(difficulty=difficulty)\n",
        "        else:\n",
        "            game = AccuracyOnlyGame(difficulty=difficulty)\n",
        "\n",
        "    elif mode_choice == '3':\n",
        "        game = PracticeMode(duration=0)  # Durasi tidak relevan untuk practice\n",
        "    else:\n",
        "        print(\"Invalid choice.\")\n",
        "        return\n",
        "\n",
        "    # Input jumlah pemain\n",
        "    num_players = int(input(\"\\nHow many players? \"))\n",
        "\n",
        "    existing_names = set()\n",
        "    for _ in range(num_players):\n",
        "        while True:\n",
        "            name = input(\"Enter player name: \")\n",
        "            if name in existing_names:\n",
        "                print(\"‚ö†Ô∏è Name already taken! Please enter a different name.\")\n",
        "            else:\n",
        "                existing_names.add(name)\n",
        "                game.add_player(name)\n",
        "                break\n",
        "\n",
        "    # Mulai game\n",
        "    game.start_game()\n",
        "\n",
        "main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "k9OfmuALB8oD",
        "outputId": "c33db546-ed60-43fd-aab8-ca36c60948c9"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "üéÆ Welcome to Multiplayer Typing Rush!\n",
            "\n",
            "Select mode:\n",
            "1. Typing Battle (Based on WPM)\n",
            "2. Typing Battle (Based on Accuracy)\n",
            "3. Practice Mode\n",
            "Enter mode (1/2/3): 1\n",
            "\n",
            "Select difficulty:\n",
            "Easy - 60 seconds\n",
            "Medium - 30 seconds\n",
            "Hard - 15 seconds\n",
            "Enter difficulty (Easy/Medium/Hard): medium\n",
            "\n",
            "How many players? 2\n",
            "Enter player name: widia\n",
            "Enter player name: widia\n",
            "‚ö†Ô∏è Name already taken! Please enter a different name.\n",
            "Enter player name: putri\n",
            "‚å®Ô∏è  Welcome to Typing Battle!\n",
            "üïí You have 30 seconds to type as many correct words as you can.\n",
            "\n",
            "‚ñ∂Ô∏è widia's turn. Press ENTER to start...ENTER\n",
            "\n",
            "üìù Type this:\n",
            "typing stack variable loop return while boolean typing syntax variable keyboard index variable object break recursion python function stack python\n",
            "\n",
            "‚å®Ô∏è Start typing now!\n",
            "\n",
            "Your input: typing stack variable loop return while boolean typing syntax variable keyboard index variable object break recursive python funtion stack python\n",
            "\n",
            "‚ö†Ô∏è You exceeded the time limit of 30s! Your input time: 56.51s\n",
            "\n",
            "‚è±Ô∏è Time: 56.51s | ‚úÖ Correct: 18 | ‚ùå Incorrect: 2\n",
            "üéØ Accuracy: 90.0% | üí® WPM: 19.11 | üõ°Ô∏è Adjusted WPM: 19.11\n",
            "\n",
            "üîÅ Next player...\n",
            "\n",
            "‚ñ∂Ô∏è putri's turn. Press ENTER to start...ENTER\n",
            "\n",
            "üìù Type this:\n",
            "loop condition boolean break boolean class recursion return break recursion python index loop update syntax boolean condition update class object\n",
            "\n",
            "‚å®Ô∏è Start typing now!\n",
            "\n",
            "Your input: loop conditiom boolean break boolena class recursion return break recursion python index loop update syntax boolena condition update class object\n",
            "\n",
            "‚ö†Ô∏è You exceeded the time limit of 30s! Your input time: 53.08s\n",
            "\n",
            "‚è±Ô∏è Time: 53.08s | ‚úÖ Correct: 17 | ‚ùå Incorrect: 3\n",
            "üéØ Accuracy: 85.0% | üí® WPM: 19.22 | üõ°Ô∏è Adjusted WPM: 19.22\n",
            "\n",
            "üîÅ Next player...\n",
            "\n",
            "üèÅ FINAL RESULTS (Based on WPM):\n",
            "1. putri | WPM: 19.22 | Adjusted WPM: 19.22 | Accuracy: 85.0% ‚è∞ (Over time)\n",
            "2. widia | WPM: 19.11 | Adjusted WPM: 19.11 | Accuracy: 90.0% ‚è∞ (Over time)\n",
            "\n",
            "üì• Leaderboard saved! Top players:\n",
            "1. adriella | Adjusted WPM: 30.63 | Accuracy: 100.0%\n",
            "2. putri | Adjusted WPM: 19.22 | Accuracy: 85.0%\n",
            "3. widia | Adjusted WPM: 19.11 | Accuracy: 90.0%\n",
            "4. widia | Adjusted WPM: 0.0 | Accuracy: 0.0%\n"
          ]
        }
      ]
    }
  ]
}